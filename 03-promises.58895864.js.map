{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SA6CE,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAvDOQ,SAASC,cAAc,SAE/BC,iBAAiB,UAE/B,SAAqCC,GAEnCA,EAAEC,iBAEF,IAAIC,EAAYF,EAAEG,OAAOC,SAErBC,EAAaC,OAAOJ,EAAUb,MAAMkB,OACpCC,EAAYF,OAAOJ,EAAUO,KAAKF,OAClCG,EAASJ,OAAOJ,EAAUQ,OAAOH,OAErC,GAAIF,GAAc,GAAKG,GAAa,GAAKE,GAAU,EAElB,YAD/BC,EAAA1B,GAAS2B,OAAOC,QAAQ,yCAI1B,IAAK,IAAIC,EAAW,EAAGA,GAAYJ,EAAQI,GAAY,EAAG,CAItD3B,EAAc2B,EAFFT,EAAaG,GAAaM,EAAW,IAG9CC,MAAK,EAAC3B,SACLA,EAAQC,MACRA,MAEAsB,EAAA1B,GAAS2B,OAAOI,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEzE4B,OAAM,EAAC7B,SACNA,EAAQC,MACRA,MAEAsB,EAAA1B,GAAS2B,OAAOC,QAAQ,sBAAoBzB,QAAeC,MAAU,G,CAM7EW,EAAEG,OAAOe,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formBtnSubmit = document.querySelector(\".form\");\n\nformBtnSubmit.addEventListener(\"submit\", hendlerOnClickCreatePromise);\n\nfunction hendlerOnClickCreatePromise(e) {\n\n  e.preventDefault();\n\n  let inputForm = e.target.elements;\n\n  let firstDelay = Number(inputForm.delay.value);\n  let delayStep = Number(inputForm.step.value);\n  let amount = Number(inputForm.amount.value);\n\n  if (firstDelay <= 0 || delayStep <= 0 || amount <= 0) {\n    Notiflix.Notify.failure(\"Менше або дорівнює нуль не проходить!\");\n    return;\n  }\n\n  for (let position = 1; position <= amount; position += 1) {\n\n    const delay = firstDelay + delayStep * (position - 1);\n\n      createPromise(position, delay)\n        .then(({\n          position,\n          delay\n        }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({\n          position,\n          delay\n        }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      \n      // firstDelay += delayStep * i;\n    }\n  \n  e.target.reset();\n}\n\n  function createPromise(position, delay) {\n\n    return new Promise((resolve, reject) => {\n\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    })\n  }\n\n// fetch(\"\").then(response => response.json());"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","inputForm","target","elements","firstDelay","Number","value","delayStep","step","amount","$parcel$interopDefault","Notify","failure","position1","then","success","catch","reset"],"version":3,"file":"03-promises.58895864.js.map"}